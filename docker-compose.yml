version: "3.8"

services:
  mongodb:
    container_name: mongo_db
    image: mongo
    volumes:
      - mongo_data:/data/db
      - ./build/database/postsdb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoroot
      - MONGO_INITDB_ROOT_PASSWORD=root
    networks:
      - microservices

  mongo-express:
    container_name: mongo_express
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=mongoroot
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - microservices

  mysqldb:
    container_name: mysql_db
    image: mysql
    restart: unless-stopped
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: yes
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 8s
      timeout: 30s
      retries: 5
      start_period: 10s
    volumes:
    - ./build/database/bloguserdb:/docker-entrypoint-initdb.d
    - mysql_data:/var/lib/mysql
    networks:
      - microservices
  
  configserver:
    container_name: configserver
    build:
      context: ./config-server
      dockerfile: ../build/docker/java-microservice.Dockerfile
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - microservices

  postservice:
    container_name: postservice
    build:
      context: ./post
      dockerfile: ../build/docker/java-microservice.Dockerfile
    depends_on:
      configserver:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mongodb:
        condition: service_started
      userservice:
        condition: service_healthy
    networks:
      - microservices

  userservice:
    container_name: userservice
    build:
      context: ./user-identity
      dockerfile: ../build/docker/java-microservice.Dockerfile
    depends_on:
      configserver:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysqldb:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8060/actuator/health/readiness | grep UP || exit 1"
      interval: 8s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - microservices

  authenticationservice:
    container_name: authenticationservice
    build:
      context: ./authentication
      dockerfile: ../build/docker/java-microservice.Dockerfile
    depends_on:
      configserver:
        condition: service_healthy
      userservice:
        condition: service_healthy
      discovery:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8050/actuator/health/readiness | grep UP || exit 1"
      interval: 8s
      timeout: 3s
      retries: 5
      start_period: 8s
    networks:
      - microservices
  
  apigateway:
    container_name: apigateway
    build:
      context: ./gateway
      dockerfile: ../build/docker/java-microservice.Dockerfile
    depends_on:
      configserver:
        condition: service_healthy
      authenticationservice:
        condition: service_healthy
      discovery:
        condition: service_healthy
    ports: 
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 8s
      timeout: 3s
      retries: 5
      start_period: 8s
    networks:
      - microservices
      - frontend

  discovery:
    container_name: discovery
    build:
      context: ./discovery
      dockerfile: ../build/docker/java-microservice.Dockerfile
    depends_on:
      configserver:
        condition: service_healthy
    ports:
      - "8700:8700"
    healthcheck:
      test: "curl --fail --silent localhost:8700/actuator/health/readiness | grep UP || exit 1"
      interval: 8s
      timeout: 3s
      retries: 5
      start_period: 8s
    networks:
      - microservices

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices

  blog-client:
    container_name: blog-client
    build:
      context: ./frontend-blog-client
      dockerfile: ../build/docker/angular-frontend.Dockerfile
    depends_on:
      apigateway:
        condition: service_healthy
    ports:
      - "4200:4200"
    networks:
      - frontend

volumes:
  mongo_data: 
  mysql_data:

networks:
  microservices:
  frontend:
